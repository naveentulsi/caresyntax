package com.caresyntax.ssa.rest;

import com.caresyntax.ssa.dto.SsaSimpleResponse;
import com.caresyntax.ssa.model.Doctor;
import com.caresyntax.ssa.service.IDoctorService;
import com.caresyntax.ssa.utility.IConstants;
import org.apache.logging.log4j.Logger;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.Collections;

import static org.mockito.Mockito.any;
import static org.mockito.Mockito.when;

public class DoctorRestControllerTest {
    @Mock
    IDoctorService doctorService;
    @Mock
    Logger log;
    @InjectMocks
    DoctorRestController doctorRestController;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetAllDoctor() throws Exception {

        when(doctorService.getAllDoctors()).thenReturn(Arrays.<Doctor>asList(new Doctor()));

        SsaSimpleResponse result = doctorRestController.getAllDoctor();
        Assert.assertEquals(IConstants.DOCTOR_FETCHED, result.getMessage());
    }

    /**
     * when no doctors in the system.
     *
     * @throws Exception
     */
    @Test
    public void testGetAllDoctorNoDoctor() throws Exception {

        when(doctorService.getAllDoctors()).thenReturn(Collections.EMPTY_LIST);

        SsaSimpleResponse result = doctorRestController.getAllDoctor();
        Assert.assertEquals(IConstants.DOCTOR_NOT_FETCHED, result.getMessage());
    }

    /**
     * when doctor is not saved.
     * @throws Exception
     */
    @Test
    public void testAddDoctorFailure() throws Exception {
        when(doctorService.saveDoctor(any())).thenReturn(new Doctor());

        ResponseEntity<SsaSimpleResponse> result = doctorRestController.addDoctor(new Doctor());
        Assert.assertEquals(IConstants.DOCTOR_NOT_SAVED, result.getBody().getMessage());
    }

    /**
     * when doctor is saved safely
     * @throws Exception
     */
    @Test
    public void testAddDoctorSuccess() throws Exception {
        // prepare data with id value as 1 - autogenerated by sequesnce in db
        final Doctor doctor = new Doctor();
        doctor.setId(1);
        doctor.setName("James");

        when(doctorService.saveDoctor(any())).thenReturn(doctor);

        ResponseEntity<SsaSimpleResponse> result = doctorRestController.addDoctor(new Doctor());
        Assert.assertEquals("Doctor saved.", result.getBody().getMessage());
    }
}